**Introduction**

mGene is a highly accurate gene finding system that is designed in a
modular way [1,2]. We are, therefore, able to provide individual tools
that perform specialized sub-tasks, for example, the prediction of DNA
signals, like transcription start sites [3] or splice sites [4], from
DNA sequence or the prediction of the content of a certain segment,
e.g., exon or intron. In total this web service offers seventeen core
tools which, together, are necessary for training mGene and predicting
genes from DNA sequence. To apply them in cooperation to act as a
complete gene finder, we advise the user to employ the mGene workflow
tools. However, the sub-tasks can also be performed independently to
achieve a specific task. The tools can be grouped into four groups
(see below for more details on the individual tools):


* **Data preparation** including the GenomeTool for creating an
  efficient internal data structure that contains the genome
  sequence. Additionally, we provide GFF2Anno and Transcript2Anno that
  generate an internal data structure containing gene models that can
  be used for training of signals, contents, or gene structures.

* **Signal prediction** including Anno2SignalLabel to generate labels
  for a certain signal, SignalTrain for training, SignalPredict for
  genome-wide prediction and SignalEval for performance evaluation of
  signal predictors.

* **Content prediction** including Anno2ContentLabel to generate
  labels for a certain content type, ContentTrain for training,
  ContentPredict for genome-wide prediction and ContentEval for
  performance evaluation of content predictors.

* **Gene prediction** including GeneTrain for training the integrative
  layer of mGene, GenePredict for genome-wide gene structure
  predictions and GeneEval for evaluation of the predicted genes. In
  addition, we provide ComposeMGenePredictor, which collects results
  from signal, content and gene training and generates a complete
  mGene predictor object and DecomposeMGenePredictor, which extracts
  the individual signal predictors from a complete mGene Predictor.

Each tool requires a set of inputs and provides at least one
output. They are managed by the Galaxy system according to their data
type. We use the following data types for data exchange between the
tools: FASTA, for nucleotide or peptide sequences and GFF3, the
General Feature Format to describe known or predicted
genes. Furthermore we have defined two related formats, namely the
Signal Prediction Format (SPF) and the Content Prediction Format
(CPF), to represent the output of signal and content
predictions. Files in any one of these formats can either be uploaded
by the user or generated by running one of the tools. Additionally, we
have some data formats representing internal data structures,
including the Genome Information Object (GIO) to describe a
genome-wide sequence with all its contigs or chromosomes, the
Annotation Gene Structure (AGS), as an efficient internal
representation of genes, the Trained Signal Predictor (TSP), the
Trained Content Predictor (TCP) and the Trained Gene Predictor (TGP)
that include all learnt parameters necessary to predict a given
signal, content or gene structure, respectively. Eventually the
Trained mGene Predictor (TmGP) contains all above mentioned parameters
and can be used to predict genes from scratch when given a DNA
sequence. More details on the individual formats can be found at the
end of the page. 


**References** 

[1] Schweikert, G., Zien, A., Zeller, G., Behr, J.,
Dieterich, C., Ong, C., Philips, P., Bona, F. D., Hartmann, L.,
Bohlen, A., Kroeger, N., Sonnenburg, S., and Raetsch, G. (2009)
mGene: Accurate computational gene finding with application to
nematode genomes. Genome Research, under review.

[2] Coghlan, A., Fiedler, T., McKay, S., Flicek, P., Harris, T.,
Blasiar, D., The nGASP Consortium, and Stein, L. (December, 2008)
nGASP: the nematode genome annotation assessment project. BMC
Bioinformatics, 9(1), 549.

[3] Sonnenburg, S., Zien, A., and Raetsch, G. (2006) Accurate
recognition of transcription starts in human. Bioinformatics,
22(14), e472.

[4] Sonnenburg, S., Schweikert, G., Philips, P., Behr, J., and
Raetsch, G. (2007) Accurate splice site prediction using support
vector machines. BMC Bioinformatics, 8 Suppl 10, S7.

------

.. class:: infomark

**Examples**

**Example 1: Using a pre-trained model to predict transcription start sites**
 
As a simple example, we will use the provided data from *Caenorhabditis
elegans* to predict transcription start sites. The following tools are
needed:

* **Examples and Instructions:** Choose "Caenorhabditis elegans" from
  the selection menu at the top of the page and press *Execute*. Three
  files will be uploaded and are added to the current history on the
  right-hand side: the Genome Sequence (FASTA), the Genome Annotation
  (GFF3), and an information file. For this example, we will only need
  the FASTA file.

* **GenomeTool:** To generate a genome information object (GIO) select
  "From current history" as *Source of genome sequence* then make sure
  that the FASTA file is selected as *Genomic sequence*. The tool will
  generate a GIO file.

* **SignalPredict:** The GIO file should be selected as *Genome
  information file*, as *Predictor source* choose "Pretrained predictor",
  as *Organism* "Caenorhabditis elegans" and as *Genomic signal*
  "transcription start sites". Execution will result in the generation
  of a Signal Prediction File (SPF) that contains all transcription
  start site predictions for each position on the provided sequence in
  the FASTA file. To view the predictions, click on the eye
  icon, next to the SPF file.

To run predictions on your own data, use the "Upload file" tool to
upload a FASTA file from your computer and continue with the GenomeTool.


**Example 2: Training a new model and applying it to detect transcription start sites**
 
Training a new model for the detection of transcription start sites is
a bit more complicated. Again, we will use the provided data from
*Caenorhabditis elegans* to train a classifier for the prediction of
transcription start sites. The following tools are applied:

* **Examples and Instructions:** Choose "Caenorhabditis elegans" from
  the selection menu at the top of the page and press Execute. Three
  files will be uploaded and displayed on the right-hand side: Genome
  Sequence (FASTA), Genome Annotation (GFF3), and an Information file.
  
* **GenomeTool:** To generate a genome information object (GIO) select
  "From current history" as *Source of genome sequence* then make sure
  that the FASTA file is selected as *Genomic sequence*. The tool will
  generate a GIO file.

* **GFF2Anno:** The GFF3 file should be selected as *Genome
  annotation*. Select "Consider non-coding annotation". The tool
  generates an internally used annotation gene structure (AGS).

* **Anno2SignalLabel:** Use the AGS file as *Genome annotation* and choose
  "Transcription Start Site" as *Genomic signal* to extract the label
  information, thereby generating a labeled training set for
  transcription start sites. This set will be saved as an SPF file.  

* **SignalTrain:** The GIO file should be selected as *Genome
  information file*, and the SPF file as *Label file*. Choose
  "Transcription Start Site" as *Genomic signal*. The complete set of
  labeled positions is used during the training process, however we
  implemented a five-fold cross validation to generate unbiased
  out-of-sample predictions for every position of the sequence in the
  FASTA file. The Trained Signal Prediction file (TSP) thus generated is an
  internal data structure. Information about the process (number of
  labeled examples used, average performance over the five test sets)
  can be viewed by clicking on the TSP file.

* **SignalPredict:** Use the GIO file as *Genome information file*,
  choose "Predictor from current history" as *Predictor source* and
  choose the TSP file as *Trained Signal Predictor*. Execution will
  result in the generation of a SPF file that contains all
  transcription start site predictions for each position on the
  provided sequence in the FASTA file. To view the predictions, click
  on the eye icon, next to the SPF file.
 
* **SignalEval:** Choose the "Label file in SPF format" generated with
  Anno2SignalLabel as *Label File* and the "Signal Predictions in SPF
  format" generated with SignalPredict as *Signal Predictions* to
  check the overall performance of your classifier.


For training on your own data, you need to upload a FASTA file with the
DNA sequence and, additionally, a corresponding GFF3 file with at least
a few annotated genes. You can then continue with the GenomeTool tool on these
files.

------

.. class:: infomark

**About workflows** 

Recently, Galaxy has been providing workflows that allow one to
pre-define the order in which tools are applied to input files and
intermittently generated files to achieve a certain goal. These
workflows can be edited by and shared among users. Workflows can help
to simplify the relatively complex process of creating a gene finding
system that consists of many different steps. In order to run a
workflow, one only needs to specify the few input arguments and as a
result obtains, for instance, the gene predictions as well as
intermediate results allowing detailed inspection.

We provide two basic workflows:

* **mGene Prediction** uses a pretrained mGene predictor as well
  as a FASTA file with genomic sequences as input and performs genome-wide gene
  predictions.

* **mGene Training** uses a FASTA file with genomic sequences and a
  (partial) annotation of these sequences in GFF3 format in
  order to train the signal, content, and gene predictors and to perform
  genome-wide gene predictions.

These workflows can be used by other users, but right now manual
interaction of the workflow owner with Galaxy is necessary in order to
share them with other users.  Please contact
Gunnar.Raetsch@tuebingen.mpg.de to obtain a shared workflow.


------

.. class:: infomark

**Detailed Description of Tools**
 
In detail, the individual tools serve the following purposes (further
information is provided when calling the individual tools):


**Data preparation**

* **GenomeTool** converts a file in FASTA format containing genomic
  sequences into a genome object, stored in a Genome Information Object
  (GIO file), to be used by other mGene tools.

* **Transcript2Anno** reads an arbitrary number of FASTA files
  containing EST, cDNA, or protein sequences and aligns them against
  the genome specified in the GIO File. Output is an efficient internal
  annotation structure (AGS file) containing putative genes that can be used for
  training.

* **GFF2Anno** reads a file in GFF3 format and converts it
  into an internal annotation structure (AGS format).

* **Anno2GFF** writes genes in AGS format into a GFF3 file.



**Signal prediction**

* **Anno2SignalLabel** uses the AGS file, containing putative genes,
  to collect labeled genomic positions for the selected signal
  (including Transcription Start and Stop Sites, Translation
  Initiation Sites and Stop Codons as well as Acceptor and Donor
  Splice Sites). The regions covered by transcripts in the AGS file
  are used to generate negative examples at all consensus positions
  unless they are annotated as true sites. The output is a file in SPF
  providing chromosome/contig, signal type, origin ('label' or 'prediction'),
  position, strand, and the label of the example (+1 for positive
  examples and -1 for negative examples).

* **SignalTrain** trains a signal predictor using SVMs with
  pre-selected kernels for each signal. Input is a GOI file (generated
  using the GenomeTool) and labeled genomic locations (in SPF format
  generated by Anno2SignalLabel). The output is an internal data
  structure (TSP) that can be used with SignalPredict in order to
  perform predictions on genomic sequences.

* **SignalPredict** uses a trained signal predictor (TSP) created with
  SignalTrain or, alternatively, an internally stored pretrained predictor for a selected
  organism and signal, in order to predict signals on the given
  genome. The output is given in signal prediction format.

* **SignalEval** takes a label file and a prediction file (both SPF
  files) as input and computes several performance measures for the
  predictions, including the areas under the Receiver-Operator-Curve
  (ROC) and the Precision-Recall-Curve (PRC). This tool is useful for
  monitoring prediction quality.


**Content prediction**

* **Anno2ContentLabel** uses the annotation (AGS) file to collect
  labeled genomic segments for the selected content types (including
  Intergenic, 5'UTR Exon, CDS Exon, Intron and 3'UTR Exon). Other
  segments in the AGS file that are not of the specified type serve as
  negative examples. The output is a file in content prediction format
  (CPF) providing chromosome/contig, content type, origin (e.g. 'label' or 'prediction'),
  start position, stop position, strand, and the label of the
  example.

* **ContentTrain** trains a content predictor using SVMs with
  pre-selected kernels for each content. Input is a GIO file and
  labeled genomic locations (in CPF format). The output is an internal
  data structure (TCP format) that can be used with ContentPredict in
  order to perform predictions on genomic sequences.

* **ContentPredict** uses a trained content predictor (TCP) created with
  ContentTrain or, alternatively, a pretrained predictor for a selected
  organism and content in order to predict contents on the given
  genome. The output is given for each position on the genome as the
  score for the complete segment from the beginning of the chromosome
  to the given position. The output score for a certain segment can
  then be computed by subtracting the score at the start position from
  the score at the end position. Note that the output file is given in
  SPF format.

* **ContentEval** takes a label file (CPF) and a prediction file (SPF)
  as input and computes several performance measures for the
  predictions, including the areas under the Receiver-Operator-Curve
  (ROC) and the Precision-Recall-Curve (PRC). This tool is useful for
  monitoring prediction quality.


**Gene prediction**

* **GeneTrain** trains the integrative layer of mGene. Based on the
  genome information file (GIO), a set of annotated genes (in AGS format) and
  genome-wide predictions for all relevant signals and contents (all
  in SPF format), GeneTrain learns to predict gene structures. The
  output is an internal data structure containing the trained gene
  predictor (TGP) that can be used with GenePredict to predict genes.

* **GenePredict** uses the
  trained gene predictor (TGP) as well as genome-wide signal and content predictions (in SPF format) to
  predict genes on the provided genome.

* **GeneEval** takes a label file and a prediction file (both either
  in GFF3 or in AGS format) and the genome information file (GIO) as
  input and computes several performance measures for the predictions,
  including the sensitivity and specificity on nucleotide, exon,
  transcript, and gene level.
  
* **ComposeMGenePredictor** takes all Signal, Content, and Gene
  Predictors and creates a complete mGene Predictor Object (TmGP).

* **DecomposeMGenePredictor** extracts Signal, Content, and Gene
  Predictors from a complete mGene Predictor (in TmGP format).


------

.. class:: infomark

**About formats**

**FASTA format** A sequence in FASTA format begins with a single-line
description, followed by lines of sequence data. The description line
is distinguished from the sequence data by a "greater than" (>) symbol
in the first column. The token until the first space or the end of the 
line is used as an identifier for the sequence. The remainder of the 
description line is ignored.

An example sequence in FASTA format is:

>CHR1

CCCTAAACCCTAAACCCTAAACCCTAAACCTCTGAATCCTTAATCCCTAAATCCCTAAAT
CTTTAAATCCTACATCCATGAATCCCTAAATACCTAATTCCCTAAACCCGAAACCGGTTT
CTCTGGTTGAAAATCATTGTGTATATAATGATAATTTTATCGTTTTTATGTAATTGCTTA
TTGTTGTGTGTAGATTTTTTAAAAATATCATTTGAGGTCAATACAAATCCTATTTCTTGT
GGTTTTCTTTCCTTCACTTAGCTATGGATGGTTTATCTTCATTTGTTATATTGGATACAA
GCTTTGCTACGATCTACATTTGGGAATGTGAGTCTCTTATTGTAACCTTAGGGTTGGTTT
ATCTCAAGAATCTTATTAATTGTTTGGACTGTTTATGTTTGGACATTTATTGTCATTCTT
ACTCCTTTGTGGAAATGTTTGTTCTATCAATTTATCTTTTGTGGGAAAATTATTTAGTTG
TAGGGATGAAGTCTTTCTTCGTTGTTGTTACGCTTGTCATCTCATCTCTCAATGATATGG
GATGGTCCTTTAGCATTTATTCTGAAGTTCTTCTGCTTGATGATTTTATCCTTAGCCAAA
AGGATTGGTGGTTTGAAGACACATCATATCAAAAAAGCTATCGCCTCGACGATGCTCTAT
TTCTATCCTTGTAGCACACATTTTGGCACTCAAAAAAGTATTTTTAGATGTTTGTTTTGC
...

**GFF3 format** General Feature Format is a format for describing genes
and other features associated with DNA, RNA, and protein sequences. GFF
lines have nine tab-separated fields:

    1. seqname - The name of the chromosome or scaffold (e.g., chr1, chrY_random).
    2. source - The program that generated this feature.
    3. feature - The name of this type of feature. Some examples of standard feature types are "CDS", "start_codon", "stop_codon", and "exon".
    4. start - The starting position of the feature in the sequence. (The first base on a chromosome is numbered 1.)
    5. end - The ending position of the feature (inclusive).
    6. score - A score between 0 and 1000. If there is no score value, enter ".".
    7. strand - Defines the strand - either '+' or '-'.
    8. frame - If the feature is a coding exon, frame should be a number between 0 and 2 that represents the reading frame of the first base. If the feature is not a coding exon, the value should be '.'.
    9. group - All lines with the same group are linked together into a single item.

For more information see http://www.sequenceontology.org/gff3.shtml

**GIO format** Genome Information Object is an internal format used to
store relevant information about the genome under consideration (as extracted
from a FASTA file). It includesk, for example, number and length of
chromosomes/contigs. The file is generated by applying the GenomeTool.

**AGS format** Annotation Gene Structure Object is an internal structure that
efficiently stores the information from a GFF3 file. It can be generated
with the GFF2Anno tool. The Anno2GFF converts it back to a GFF3 file.

**SPF format** Signal Prediction Format is designed to provide
information such as labels or predictions for specific genomic
locations (with strand information). It requires exactly six
fields:

    1. seqname - The name of the chromosome or scaffold (e.g., chr1, chrY_random).
    2. feature - signal name: possible choices include tss, tis, acc, don, cdsStop, cleave.
    3. scoreName - possible choices include label, output, Conf, Conf_Cum
    4. chromPos - The position in the chromosome. (The first base on a chromosome is numbered 1.) 
    5. strand - Defines the strand - either '+' or '-'.
    6. score - The score between -infinity and infinity. If scoreName is 'label', then the score should be either -1 or 1.

**CPF format** Content Prediction Format is similar to the SPF format,
except that it requires exactly one additional field, as it contains
information on segments not on individual positions:

    1. seqname - The name of the chromosome or scaffold (e.g., chr1, chrY_random).
    2. feature - content name: possible choices include (intergenic, 5'UTR exon, CDS exon, intron and 3'UTR exon)
    3. scoreName - possible choices include label, output, Conf, Conf_Cum
    4. start - The starting position of the feature in the sequence. (The first base on a chromosome is numbered 1.)
    5. end - The ending position of the feature (inclusive).
    6. strand - Defines the strand - either '+' or '-'.
    7. score - The score between -infinity and infinity. If scoreName is 'label', then the score should be either -1 or 1.

**TSP format** Trained Signal Predictor is an internal structure that contains the trained model for a given signal.

**TCP format** Trained Content Predictor is an internal structure that contains the trained model for a given content.

**TGP format** Trained Gene Predictor is an internal structure that contains the trained model to predict genes.

**TmGP format** Trained mGene Predictor is an internal structure that
contains the complete trained model including all signal and content
predictors as well as the gene predictor to predict genes from
sequence.
