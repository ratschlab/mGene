"""
#############################################################################################
#                                                                                           #
#    This class is part of the metaTFBS ExpressionAnalysis package, it manages input files. #
#    Copyright (C) 2006 - 2010 Sebastian J. Schultheiss <sebi@umich.edu>                    #
#                                                                                           #
#    This program is free software; you can redistribute it and/or modify                   #
#    it under the terms of the GNU General Public License as published by                   #
#    the Free Software Foundation; either version 3 of the License, or                      #
#    (at your option) any later version.                                                    #
#                                                                                           #
#    This program is distributed in the hope that it will be useful,                        #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of                         #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                           # 
#    GNU General Public License for more details.                                           #
#                                                                                           #
#    You should have received a copy of the GNU General Public License                      # 
#    along with this program; if not, see http://www.gnu.org/licenses                       #
#    or write to the Free Software Foundation, Inc., 51 Franklin Street,                    #
#    Fifth Floor, Boston, MA 02110-1301  USA                                                #
#                                                                                           #
#############################################################################################
#                                                                                           #
#  Original Author: Sebastian J. Schultheiss, version 1.0                                   #
#  Please add a notice of any modifications here:                                           #
#                                                                                           #
#                                                                                           #
#############################################################################################
"""


import os
from re import sub
from random import randint

class Gff3File:
    """wraps several GffEntry instances to one file"""
    def __init__(self):
        self.gff = []
    
    def getGff(self):
        """Returns the list of GffEntries"""
        return self.gff
    
    def getiGff(self, i):
        """Returns the ith GffEntry"""
        return self.gff[i]
    
    def __len__(self):
        """Used for the len() command, returns the number of GffEntries"""
        return len(self.gff)        
    
    def getLength(self):
        """Returns the number of GffEntries"""
        return len(self)
        
    def getFormattedGff(self):
        gffstring = "#INCLUSive GFF File generated by KIRMES.web\n"
        for line in self.gff:
            gffstring = gffstring + line.getGffLine()
        return gffstring
    
    def read(self, gffFile, dir = ""):    
        max = 0
        if (isinstance(gffFile, file)):
            parsee = gffFile.readlines()
        else:
            lfile = open(os.path.join(dir, gffFile))
            #lfile.readline() #skip the first line
            parsee = lfile.readlines()
        for line in parsee:
            if line.startswith("#") or len(line) < 3:
                continue
            ge = Gff3Entry()
            ge.setFromLine(line)
            self.add(ge)
            if ge.getEnd() > max:
                max = ge.getEnd()
        return max
    
    def add(self, ge):
        self.gff.append(ge)
            

class Gff3Entry:
    """Representing one line in a gff File"""
    def __len__(self):
        return abs(self.start - self.stop)
    
    def __init__(self):
        self.seqid = ""
        self.source = "" 
        self.type = ""
        self.start = 0
        self.end = 0
        self.length = 0
        self.score = 0.0
        self.strand = True
        self.phase = 0
        self.attributes = ""
    
    def setFromLine(self, line):
        array = line.split("\t")
        self.setSeqId(array[0])
        self.setSource(array[1])
        self.setType(array[2])
        self.setStartEnd(array[3], array[4])
        self.setScore(array[5])
        self.setStrand(array[6])
        self.setPhase(array[7])
        self.setAttributes(array[8])        
        
    def setSeqId(self, line):
        self.seqid = line.strip()
        
    def setSource(self, line):
        self.source = line.strip()
        
    def setType(self, line):
        self.type = line.strip()
        
    def setStartEnd(self, s, e):
        self.start = int(s)
        self.end = int(e)
        self.length = self.start - self.end
        if (self.length < 0):
            self.length = -self.length
    
    def setScore(self, line):
        self.score = line.strip()    
        
    def setStrand(self, line):
        if (line.strip() == "+"):
            self.setStrandFromBool(True)
        elif (line.strip() == "-"):
            self.setStrandFromBool(False)
    
    def setStrandFromBool(self, bool):
        self.strand = bool
        
    def setPhase(self, line):
        self.dot = line.strip()
        
    def setAttributes(self, line):
        self.id = line.strip()
        
    def strandString(self):
        if (self.strand):
            return "+"
        else:
            return "-"
        
    def getGffLine(self):
        return (self.seqid + '\t' + self.source + '\t' 
                + self.type + '\t' + str(self.start) + '\t' 
                + str(self.end) + '\t' + str(self.score) + '\t' 
                + self.strandString() + '\t' + str(self.phase) 
                + '\t' + self.attributes + '\n')
        
    def getSeqId(self):
        return self.seqid
    
    def getSource(self):
        return self.source
    
    def getType(self):
        return self.type
    
    def getStart(self):
        return self.start
    
    def getEnd(self):
        return self.end
    
    def getLength(self):
        return self.length
        
    def __len__():
        return self.length
    
    def getScore(self):
        return self.score
    
    def getStrand(self):
        return self.strand
    
    def getStrandString(self):
        return self.strandString()
    
    def getPhase(self):
        return self.phase
    
    def getAttributes(self):
        return self.Attributes
        
    